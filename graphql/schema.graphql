"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [GroupWhereInput!]
  
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [GroupWhereInput!]
  
  """namespaces edge predicates"""
  hasNamespaces: Boolean
  hasNamespacesWith: [NamespaceWhereInput!]
}

"""
InstallationWhereInput is used for filtering Installation objects.
Input was generated by ent.
"""
input InstallationWhereInput {
  not: InstallationWhereInput
  and: [InstallationWhereInput!]
  or: [InstallationWhereInput!]
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """moduleVersion edge predicates"""
  hasModuleVersion: Boolean
  hasModuleVersionWith: [ModuleVersionWhereInput!]
}

"""
ModuleWhereInput is used for filtering Module objects.
Input was generated by ent.
"""
input ModuleWhereInput {
  not: ModuleWhereInput
  and: [ModuleWhereInput!]
  or: [ModuleWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """namespace edge predicates"""
  hasNamespace: Boolean
  hasNamespaceWith: [NamespaceWhereInput!]
  
  """versions edge predicates"""
  hasVersions: Boolean
  hasVersionsWith: [ModuleVersionWhereInput!]
}

"""
ModuleVersionWhereInput is used for filtering ModuleVersion objects.
Input was generated by ent.
"""
input ModuleVersionWhereInput {
  not: ModuleVersionWhereInput
  and: [ModuleVersionWhereInput!]
  or: [ModuleVersionWhereInput!]
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """module edge predicates"""
  hasModule: Boolean
  hasModuleWith: [ModuleWhereInput!]
  
  """installations edge predicates"""
  hasInstallations: Boolean
  hasInstallationsWith: [InstallationWhereInput!]
}

"""
NamespaceWhereInput is used for filtering Namespace objects.
Input was generated by ent.
"""
input NamespaceWhereInput {
  not: NamespaceWhereInput
  and: [NamespaceWhereInput!]
  or: [NamespaceWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  
  """modules edge predicates"""
  hasModules: Boolean
  hasModulesWith: [ModuleWhereInput!]
  
  """installations edge predicates"""
  hasInstallations: Boolean
  hasInstallationsWith: [InstallationWhereInput!]
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  
  """namespaces edge predicates"""
  hasNamespaces: Boolean
  hasNamespacesWith: [NamespaceWhereInput!]
}
type Group implements Node {
  id: ID!
  name: String!
  createdAt: Time
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection! @goField(forceResolver: true)
  resolvedUsers(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection! @goField(forceResolver: true)
  parent: Group
  children(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GroupOrder
    where: GroupWhereInput
  ): GroupConnection! @goField(forceResolver: true)
}

type GroupConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GroupEdge]
}

type GroupEdge {
  node: Group
  cursor: Cursor!
}

enum GroupOrderField {
  CREATED_AT
  NAME
}

input GroupOrder {
  direction: OrderDirection!
  field: GroupOrderField
}

input CreateGroup {
  name: String!
}

input UpdateGroup {
  id: ID!
  name: String
  parent: ID
  users: [ID]
}

input DeleteGroup {
  id: ID!
}

input AddUserToGroup {
  groupId: ID!
  userId: ID!
}
type Installation implements Node {
  id: ID!
  moduleVersion: ModuleVersion!
  createdAt: Time!
}

type InstallationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [InstallationEdge]
}

type InstallationEdge {
  node: Installation
  cursor: Cursor!
}

enum InstallationOrderField {
  CREATED_AT
}

input InstallationOrder {
  direction: OrderDirection!
  field: InstallationOrderField
}

input CreateInstallation {
  moduleVersionId: ID!
}

input UpdateInstallation {
  id: ID!
}

input DeleteInstallation {
  id: ID!
}
type ModuleVersion implements Node {
  id: ID!
  module: Module!
  createdAt: Time!
  installations(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: InstallationOrder
    where: InstallationWhereInput
  ): InstallationConnection! @goField(forceResolver: true)
}

type ModuleVersionConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ModuleVersionEdge]
}

type ModuleVersionEdge {
  node: ModuleVersion
  cursor: Cursor!
}

enum ModuleVersionOrderField {
  CREATED_AT
  NAME
}

input ModuleVersionOrder {
  direction: OrderDirection!
  field: ModuleVersionOrderField
}

input CreateModuleVersion {
  id: ID!
  version: String!
}

input UpdateModuleVersion {
  id: ID!
}

input DeleteModuleVersion {
  id: ID!
}
type Module implements Node {
  id: ID!
  name: String!
  description: String!
  createdAt: Time
  latestVersion: ModuleVersion
  versions(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: ModuleVersionOrder
    where: ModuleVersionWhereInput
  ): ModuleVersionConnection! @goField(forceResolver: true)
}

type ModuleConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ModuleEdge]
}

type ModuleEdge {
  node: Module
  cursor: Cursor!
}

enum ModuleOrderField {
  CREATED_AT
  NAME
}

input ModuleOrder {
  direction: OrderDirection!
  field: ModuleOrderField
}

input CreateModule {
  name: String!
  description: String!
}

input UpdateModule {
  id: ID!
  name: String
  description: String
}

input DeleteModule {
  id: ID!
}
type Namespace implements Node {
  id: ID!
  name: String!
  createdAt: Time
  groups(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GroupOrder
    where: GroupWhereInput
  ): GroupConnection! @goField(forceResolver: true)
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection! @goField(forceResolver: true)
  resolvedUsers(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection! @goField(forceResolver: true)
}

type NamespaceConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [NamespaceEdge]
}

type NamespaceEdge {
  node: Namespace
  cursor: Cursor!
}

enum NamespaceOrderField {
  CREATED_AT
  NAME
}

input NamespaceOrder {
  direction: OrderDirection!
  field: NamespaceOrderField
}

input CreateNamespace {
  name: String!
}

input UpdateNamespace {
  id: ID!
  name: String
}

input DeleteNamespace {
  id: ID!
}
type Query {
  groups(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GroupOrder
    where: GroupWhereInput
  ): GroupConnection!

  installations(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: InstallationOrder
    where: InstallationWhereInput
  ): InstallationConnection!

  modules(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: ModuleOrder
    where: ModuleWhereInput
  ): ModuleConnection!

  moduleVersions(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: ModuleVersionOrder
    where: ModuleVersionWhereInput
  ): ModuleVersionConnection!

  namespaces(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: NamespaceOrder
    where: NamespaceWhereInput
  ): NamespaceConnection!

  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection!

  user: User!
}

type Mutation {
  # Groups
  createGroup(input: CreateGroup!): Group!
  updateGroup(input: UpdateGroup!): Group!
  deleteGroup(input: DeleteGroup!): ID!
  # addUsersToGroup(input: AddUsersToGroup!): Group!
  # removeUsersFromGroup(input: RemoveUsersFromGroup!): Group!
  # setGroupParent(input: SetGroupParent!): Group!

  # Installation
  createInstallation(input: CreateInstallation!): Installation!
  updateInstallation(input: UpdateInstallation!): Installation!
  deleteInstallation(input: DeleteInstallation!): ID!

  # Module
  createModule(input: CreateModule!): Module!
  updateModule(input: UpdateModule!): Module!
  deleteModule(input: DeleteModule!): ID!

  # ModuleVersion
  createModuleVersion(input: CreateModuleVersion!): ModuleVersion!
  updateModuleVersion(input: UpdateModuleVersion!): ModuleVersion!
  deleteModuleVersion(input: DeleteModuleVersion!): ID!

  # Namespace
  createNamespace(input: CreateNamespace!): Namespace!
  updateNamespace(input: UpdateNamespace!): Namespace!
  deleteNamespace(input: DeleteNamespace!): ID!

  # User
  createUser(input: CreateUser!): User!
  updateUser(input: UpdateUser!): User!
  deleteUser(input: DeleteUser!): ID!
}

scalar Time
scalar Cursor

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
  | FIELD_DEFINITION

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

enum OrderDirection {
  ASC
  DESC
}
type User implements Node {
  id: ID!
  name: String!
  createdAt: Time
  groups(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GroupOrder
    where: GroupWhereInput
  ): GroupConnection! @goField(forceResolver: true)
  resolvedGroups(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GroupOrder
    where: GroupWhereInput
  ): GroupConnection! @goField(forceResolver: true)
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

enum UserOrderField {
  CREATED_AT
  NAME
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField
}

input CreateUser {
  name: String!
}

input UpdateUser {
  id: ID!
  name: String
}

input DeleteUser {
  id: ID!
}
