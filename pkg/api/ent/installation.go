// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/meringu/selfserve/pkg/api/ent/installation"
	"github.com/meringu/selfserve/pkg/api/ent/moduleversion"
)

// Installation is the model entity for the Installation schema.
type Installation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstallationQuery when eager-loading is set.
	Edges                        InstallationEdges `json:"edges"`
	module_version_installations *int
	namespace_installations      *int
}

// InstallationEdges holds the relations/edges for other nodes in the graph.
type InstallationEdges struct {
	// ModuleVersion holds the value of the moduleVersion edge.
	ModuleVersion *ModuleVersion `json:"moduleVersion,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ModuleVersionOrErr returns the ModuleVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstallationEdges) ModuleVersionOrErr() (*ModuleVersion, error) {
	if e.loadedTypes[0] {
		if e.ModuleVersion == nil {
			// The edge moduleVersion was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: moduleversion.Label}
		}
		return e.ModuleVersion, nil
	}
	return nil, &NotLoadedError{edge: "moduleVersion"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Installation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case installation.FieldID:
			values[i] = new(sql.NullInt64)
		case installation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case installation.ForeignKeys[0]: // module_version_installations
			values[i] = new(sql.NullInt64)
		case installation.ForeignKeys[1]: // namespace_installations
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Installation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Installation fields.
func (i *Installation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case installation.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case installation.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case installation.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field module_version_installations", value)
			} else if value.Valid {
				i.module_version_installations = new(int)
				*i.module_version_installations = int(value.Int64)
			}
		case installation.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field namespace_installations", value)
			} else if value.Valid {
				i.namespace_installations = new(int)
				*i.namespace_installations = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryModuleVersion queries the "moduleVersion" edge of the Installation entity.
func (i *Installation) QueryModuleVersion() *ModuleVersionQuery {
	return (&InstallationClient{config: i.config}).QueryModuleVersion(i)
}

// Update returns a builder for updating this Installation.
// Note that you need to call Installation.Unwrap() before calling this method if this Installation
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Installation) Update() *InstallationUpdateOne {
	return (&InstallationClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Installation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Installation) Unwrap() *Installation {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Installation is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Installation) String() string {
	var builder strings.Builder
	builder.WriteString("Installation(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Installations is a parsable slice of Installation.
type Installations []*Installation

func (i Installations) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
