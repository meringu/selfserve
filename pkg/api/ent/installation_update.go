// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/meringu/selfserve/pkg/api/ent/installation"
	"github.com/meringu/selfserve/pkg/api/ent/moduleversion"
	"github.com/meringu/selfserve/pkg/api/ent/predicate"
)

// InstallationUpdate is the builder for updating Installation entities.
type InstallationUpdate struct {
	config
	hooks    []Hook
	mutation *InstallationMutation
}

// Where appends a list predicates to the InstallationUpdate builder.
func (iu *InstallationUpdate) Where(ps ...predicate.Installation) *InstallationUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetModuleVersionID sets the "moduleVersion" edge to the ModuleVersion entity by ID.
func (iu *InstallationUpdate) SetModuleVersionID(id int) *InstallationUpdate {
	iu.mutation.SetModuleVersionID(id)
	return iu
}

// SetNillableModuleVersionID sets the "moduleVersion" edge to the ModuleVersion entity by ID if the given value is not nil.
func (iu *InstallationUpdate) SetNillableModuleVersionID(id *int) *InstallationUpdate {
	if id != nil {
		iu = iu.SetModuleVersionID(*id)
	}
	return iu
}

// SetModuleVersion sets the "moduleVersion" edge to the ModuleVersion entity.
func (iu *InstallationUpdate) SetModuleVersion(m *ModuleVersion) *InstallationUpdate {
	return iu.SetModuleVersionID(m.ID)
}

// Mutation returns the InstallationMutation object of the builder.
func (iu *InstallationUpdate) Mutation() *InstallationMutation {
	return iu.mutation
}

// ClearModuleVersion clears the "moduleVersion" edge to the ModuleVersion entity.
func (iu *InstallationUpdate) ClearModuleVersion() *InstallationUpdate {
	iu.mutation.ClearModuleVersion()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstallationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstallationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstallationUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstallationUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstallationUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InstallationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   installation.Table,
			Columns: installation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: installation.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iu.mutation.ModuleVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installation.ModuleVersionTable,
			Columns: []string{installation.ModuleVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduleversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ModuleVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installation.ModuleVersionTable,
			Columns: []string{installation.ModuleVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduleversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InstallationUpdateOne is the builder for updating a single Installation entity.
type InstallationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstallationMutation
}

// SetModuleVersionID sets the "moduleVersion" edge to the ModuleVersion entity by ID.
func (iuo *InstallationUpdateOne) SetModuleVersionID(id int) *InstallationUpdateOne {
	iuo.mutation.SetModuleVersionID(id)
	return iuo
}

// SetNillableModuleVersionID sets the "moduleVersion" edge to the ModuleVersion entity by ID if the given value is not nil.
func (iuo *InstallationUpdateOne) SetNillableModuleVersionID(id *int) *InstallationUpdateOne {
	if id != nil {
		iuo = iuo.SetModuleVersionID(*id)
	}
	return iuo
}

// SetModuleVersion sets the "moduleVersion" edge to the ModuleVersion entity.
func (iuo *InstallationUpdateOne) SetModuleVersion(m *ModuleVersion) *InstallationUpdateOne {
	return iuo.SetModuleVersionID(m.ID)
}

// Mutation returns the InstallationMutation object of the builder.
func (iuo *InstallationUpdateOne) Mutation() *InstallationMutation {
	return iuo.mutation
}

// ClearModuleVersion clears the "moduleVersion" edge to the ModuleVersion entity.
func (iuo *InstallationUpdateOne) ClearModuleVersion() *InstallationUpdateOne {
	iuo.mutation.ClearModuleVersion()
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstallationUpdateOne) Select(field string, fields ...string) *InstallationUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Installation entity.
func (iuo *InstallationUpdateOne) Save(ctx context.Context) (*Installation, error) {
	var (
		err  error
		node *Installation
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstallationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstallationUpdateOne) SaveX(ctx context.Context) *Installation {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstallationUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstallationUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InstallationUpdateOne) sqlSave(ctx context.Context) (_node *Installation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   installation.Table,
			Columns: installation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: installation.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Installation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, installation.FieldID)
		for _, f := range fields {
			if !installation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != installation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iuo.mutation.ModuleVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installation.ModuleVersionTable,
			Columns: []string{installation.ModuleVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduleversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ModuleVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   installation.ModuleVersionTable,
			Columns: []string{installation.ModuleVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduleversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Installation{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
