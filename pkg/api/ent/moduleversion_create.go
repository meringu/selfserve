// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/meringu/selfserve/pkg/api/ent/installation"
	"github.com/meringu/selfserve/pkg/api/ent/module"
	"github.com/meringu/selfserve/pkg/api/ent/moduleversion"
)

// ModuleVersionCreate is the builder for creating a ModuleVersion entity.
type ModuleVersionCreate struct {
	config
	mutation *ModuleVersionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mvc *ModuleVersionCreate) SetCreatedAt(t time.Time) *ModuleVersionCreate {
	mvc.mutation.SetCreatedAt(t)
	return mvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mvc *ModuleVersionCreate) SetNillableCreatedAt(t *time.Time) *ModuleVersionCreate {
	if t != nil {
		mvc.SetCreatedAt(*t)
	}
	return mvc
}

// SetModuleID sets the "module" edge to the Module entity by ID.
func (mvc *ModuleVersionCreate) SetModuleID(id int) *ModuleVersionCreate {
	mvc.mutation.SetModuleID(id)
	return mvc
}

// SetNillableModuleID sets the "module" edge to the Module entity by ID if the given value is not nil.
func (mvc *ModuleVersionCreate) SetNillableModuleID(id *int) *ModuleVersionCreate {
	if id != nil {
		mvc = mvc.SetModuleID(*id)
	}
	return mvc
}

// SetModule sets the "module" edge to the Module entity.
func (mvc *ModuleVersionCreate) SetModule(m *Module) *ModuleVersionCreate {
	return mvc.SetModuleID(m.ID)
}

// AddInstallationIDs adds the "installations" edge to the Installation entity by IDs.
func (mvc *ModuleVersionCreate) AddInstallationIDs(ids ...int) *ModuleVersionCreate {
	mvc.mutation.AddInstallationIDs(ids...)
	return mvc
}

// AddInstallations adds the "installations" edges to the Installation entity.
func (mvc *ModuleVersionCreate) AddInstallations(i ...*Installation) *ModuleVersionCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mvc.AddInstallationIDs(ids...)
}

// Mutation returns the ModuleVersionMutation object of the builder.
func (mvc *ModuleVersionCreate) Mutation() *ModuleVersionMutation {
	return mvc.mutation
}

// Save creates the ModuleVersion in the database.
func (mvc *ModuleVersionCreate) Save(ctx context.Context) (*ModuleVersion, error) {
	var (
		err  error
		node *ModuleVersion
	)
	mvc.defaults()
	if len(mvc.hooks) == 0 {
		if err = mvc.check(); err != nil {
			return nil, err
		}
		node, err = mvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mvc.check(); err != nil {
				return nil, err
			}
			mvc.mutation = mutation
			if node, err = mvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mvc.hooks) - 1; i >= 0; i-- {
			if mvc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mvc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mvc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mvc *ModuleVersionCreate) SaveX(ctx context.Context) *ModuleVersion {
	v, err := mvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvc *ModuleVersionCreate) Exec(ctx context.Context) error {
	_, err := mvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvc *ModuleVersionCreate) ExecX(ctx context.Context) {
	if err := mvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mvc *ModuleVersionCreate) defaults() {
	if _, ok := mvc.mutation.CreatedAt(); !ok {
		v := moduleversion.DefaultCreatedAt()
		mvc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvc *ModuleVersionCreate) check() error {
	if _, ok := mvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	return nil
}

func (mvc *ModuleVersionCreate) sqlSave(ctx context.Context) (*ModuleVersion, error) {
	_node, _spec := mvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mvc *ModuleVersionCreate) createSpec() (*ModuleVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &ModuleVersion{config: mvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: moduleversion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moduleversion.FieldID,
			},
		}
	)
	if value, ok := mvc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: moduleversion.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := mvc.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleversion.ModuleTable,
			Columns: []string{moduleversion.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.module_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mvc.mutation.InstallationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moduleversion.InstallationsTable,
			Columns: []string{moduleversion.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModuleVersionCreateBulk is the builder for creating many ModuleVersion entities in bulk.
type ModuleVersionCreateBulk struct {
	config
	builders []*ModuleVersionCreate
}

// Save creates the ModuleVersion entities in the database.
func (mvcb *ModuleVersionCreateBulk) Save(ctx context.Context) ([]*ModuleVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mvcb.builders))
	nodes := make([]*ModuleVersion, len(mvcb.builders))
	mutators := make([]Mutator, len(mvcb.builders))
	for i := range mvcb.builders {
		func(i int, root context.Context) {
			builder := mvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModuleVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mvcb *ModuleVersionCreateBulk) SaveX(ctx context.Context) []*ModuleVersion {
	v, err := mvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvcb *ModuleVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := mvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvcb *ModuleVersionCreateBulk) ExecX(ctx context.Context) {
	if err := mvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
