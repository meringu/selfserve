// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/meringu/selfserve/pkg/api/ent/installation"
	"github.com/meringu/selfserve/pkg/api/ent/module"
	"github.com/meringu/selfserve/pkg/api/ent/moduleversion"
	"github.com/meringu/selfserve/pkg/api/ent/predicate"
)

// ModuleVersionUpdate is the builder for updating ModuleVersion entities.
type ModuleVersionUpdate struct {
	config
	hooks    []Hook
	mutation *ModuleVersionMutation
}

// Where appends a list predicates to the ModuleVersionUpdate builder.
func (mvu *ModuleVersionUpdate) Where(ps ...predicate.ModuleVersion) *ModuleVersionUpdate {
	mvu.mutation.Where(ps...)
	return mvu
}

// SetModuleID sets the "module" edge to the Module entity by ID.
func (mvu *ModuleVersionUpdate) SetModuleID(id int) *ModuleVersionUpdate {
	mvu.mutation.SetModuleID(id)
	return mvu
}

// SetNillableModuleID sets the "module" edge to the Module entity by ID if the given value is not nil.
func (mvu *ModuleVersionUpdate) SetNillableModuleID(id *int) *ModuleVersionUpdate {
	if id != nil {
		mvu = mvu.SetModuleID(*id)
	}
	return mvu
}

// SetModule sets the "module" edge to the Module entity.
func (mvu *ModuleVersionUpdate) SetModule(m *Module) *ModuleVersionUpdate {
	return mvu.SetModuleID(m.ID)
}

// AddInstallationIDs adds the "installations" edge to the Installation entity by IDs.
func (mvu *ModuleVersionUpdate) AddInstallationIDs(ids ...int) *ModuleVersionUpdate {
	mvu.mutation.AddInstallationIDs(ids...)
	return mvu
}

// AddInstallations adds the "installations" edges to the Installation entity.
func (mvu *ModuleVersionUpdate) AddInstallations(i ...*Installation) *ModuleVersionUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mvu.AddInstallationIDs(ids...)
}

// Mutation returns the ModuleVersionMutation object of the builder.
func (mvu *ModuleVersionUpdate) Mutation() *ModuleVersionMutation {
	return mvu.mutation
}

// ClearModule clears the "module" edge to the Module entity.
func (mvu *ModuleVersionUpdate) ClearModule() *ModuleVersionUpdate {
	mvu.mutation.ClearModule()
	return mvu
}

// ClearInstallations clears all "installations" edges to the Installation entity.
func (mvu *ModuleVersionUpdate) ClearInstallations() *ModuleVersionUpdate {
	mvu.mutation.ClearInstallations()
	return mvu
}

// RemoveInstallationIDs removes the "installations" edge to Installation entities by IDs.
func (mvu *ModuleVersionUpdate) RemoveInstallationIDs(ids ...int) *ModuleVersionUpdate {
	mvu.mutation.RemoveInstallationIDs(ids...)
	return mvu
}

// RemoveInstallations removes "installations" edges to Installation entities.
func (mvu *ModuleVersionUpdate) RemoveInstallations(i ...*Installation) *ModuleVersionUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mvu.RemoveInstallationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mvu *ModuleVersionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mvu.hooks) == 0 {
		affected, err = mvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mvu.mutation = mutation
			affected, err = mvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mvu.hooks) - 1; i >= 0; i-- {
			if mvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mvu *ModuleVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := mvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mvu *ModuleVersionUpdate) Exec(ctx context.Context) error {
	_, err := mvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvu *ModuleVersionUpdate) ExecX(ctx context.Context) {
	if err := mvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mvu *ModuleVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moduleversion.Table,
			Columns: moduleversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moduleversion.FieldID,
			},
		},
	}
	if ps := mvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mvu.mutation.ModuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleversion.ModuleTable,
			Columns: []string{moduleversion.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleversion.ModuleTable,
			Columns: []string{moduleversion.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvu.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moduleversion.InstallationsTable,
			Columns: []string{moduleversion.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.RemovedInstallationsIDs(); len(nodes) > 0 && !mvu.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moduleversion.InstallationsTable,
			Columns: []string{moduleversion.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.InstallationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moduleversion.InstallationsTable,
			Columns: []string{moduleversion.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moduleversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ModuleVersionUpdateOne is the builder for updating a single ModuleVersion entity.
type ModuleVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModuleVersionMutation
}

// SetModuleID sets the "module" edge to the Module entity by ID.
func (mvuo *ModuleVersionUpdateOne) SetModuleID(id int) *ModuleVersionUpdateOne {
	mvuo.mutation.SetModuleID(id)
	return mvuo
}

// SetNillableModuleID sets the "module" edge to the Module entity by ID if the given value is not nil.
func (mvuo *ModuleVersionUpdateOne) SetNillableModuleID(id *int) *ModuleVersionUpdateOne {
	if id != nil {
		mvuo = mvuo.SetModuleID(*id)
	}
	return mvuo
}

// SetModule sets the "module" edge to the Module entity.
func (mvuo *ModuleVersionUpdateOne) SetModule(m *Module) *ModuleVersionUpdateOne {
	return mvuo.SetModuleID(m.ID)
}

// AddInstallationIDs adds the "installations" edge to the Installation entity by IDs.
func (mvuo *ModuleVersionUpdateOne) AddInstallationIDs(ids ...int) *ModuleVersionUpdateOne {
	mvuo.mutation.AddInstallationIDs(ids...)
	return mvuo
}

// AddInstallations adds the "installations" edges to the Installation entity.
func (mvuo *ModuleVersionUpdateOne) AddInstallations(i ...*Installation) *ModuleVersionUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mvuo.AddInstallationIDs(ids...)
}

// Mutation returns the ModuleVersionMutation object of the builder.
func (mvuo *ModuleVersionUpdateOne) Mutation() *ModuleVersionMutation {
	return mvuo.mutation
}

// ClearModule clears the "module" edge to the Module entity.
func (mvuo *ModuleVersionUpdateOne) ClearModule() *ModuleVersionUpdateOne {
	mvuo.mutation.ClearModule()
	return mvuo
}

// ClearInstallations clears all "installations" edges to the Installation entity.
func (mvuo *ModuleVersionUpdateOne) ClearInstallations() *ModuleVersionUpdateOne {
	mvuo.mutation.ClearInstallations()
	return mvuo
}

// RemoveInstallationIDs removes the "installations" edge to Installation entities by IDs.
func (mvuo *ModuleVersionUpdateOne) RemoveInstallationIDs(ids ...int) *ModuleVersionUpdateOne {
	mvuo.mutation.RemoveInstallationIDs(ids...)
	return mvuo
}

// RemoveInstallations removes "installations" edges to Installation entities.
func (mvuo *ModuleVersionUpdateOne) RemoveInstallations(i ...*Installation) *ModuleVersionUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mvuo.RemoveInstallationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mvuo *ModuleVersionUpdateOne) Select(field string, fields ...string) *ModuleVersionUpdateOne {
	mvuo.fields = append([]string{field}, fields...)
	return mvuo
}

// Save executes the query and returns the updated ModuleVersion entity.
func (mvuo *ModuleVersionUpdateOne) Save(ctx context.Context) (*ModuleVersion, error) {
	var (
		err  error
		node *ModuleVersion
	)
	if len(mvuo.hooks) == 0 {
		node, err = mvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mvuo.mutation = mutation
			node, err = mvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mvuo.hooks) - 1; i >= 0; i-- {
			if mvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mvuo *ModuleVersionUpdateOne) SaveX(ctx context.Context) *ModuleVersion {
	node, err := mvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mvuo *ModuleVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := mvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvuo *ModuleVersionUpdateOne) ExecX(ctx context.Context) {
	if err := mvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mvuo *ModuleVersionUpdateOne) sqlSave(ctx context.Context) (_node *ModuleVersion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moduleversion.Table,
			Columns: moduleversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moduleversion.FieldID,
			},
		},
	}
	id, ok := mvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ModuleVersion.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moduleversion.FieldID)
		for _, f := range fields {
			if !moduleversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != moduleversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mvuo.mutation.ModuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleversion.ModuleTable,
			Columns: []string{moduleversion.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleversion.ModuleTable,
			Columns: []string{moduleversion.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvuo.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moduleversion.InstallationsTable,
			Columns: []string{moduleversion.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.RemovedInstallationsIDs(); len(nodes) > 0 && !mvuo.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moduleversion.InstallationsTable,
			Columns: []string{moduleversion.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.InstallationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moduleversion.InstallationsTable,
			Columns: []string{moduleversion.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ModuleVersion{config: mvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moduleversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
