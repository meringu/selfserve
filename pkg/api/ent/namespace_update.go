// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/meringu/selfserve/pkg/api/ent/group"
	"github.com/meringu/selfserve/pkg/api/ent/installation"
	"github.com/meringu/selfserve/pkg/api/ent/module"
	"github.com/meringu/selfserve/pkg/api/ent/namespace"
	"github.com/meringu/selfserve/pkg/api/ent/predicate"
	"github.com/meringu/selfserve/pkg/api/ent/user"
)

// NamespaceUpdate is the builder for updating Namespace entities.
type NamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *NamespaceMutation
}

// Where appends a list predicates to the NamespaceUpdate builder.
func (nu *NamespaceUpdate) Where(ps ...predicate.Namespace) *NamespaceUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetName sets the "name" field.
func (nu *NamespaceUpdate) SetName(s string) *NamespaceUpdate {
	nu.mutation.SetName(s)
	return nu
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (nu *NamespaceUpdate) AddGroupIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.AddGroupIDs(ids...)
	return nu
}

// AddGroups adds the "groups" edges to the Group entity.
func (nu *NamespaceUpdate) AddGroups(g ...*Group) *NamespaceUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nu.AddGroupIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (nu *NamespaceUpdate) AddUserIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.AddUserIDs(ids...)
	return nu
}

// AddUsers adds the "users" edges to the User entity.
func (nu *NamespaceUpdate) AddUsers(u ...*User) *NamespaceUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nu.AddUserIDs(ids...)
}

// AddModuleIDs adds the "modules" edge to the Module entity by IDs.
func (nu *NamespaceUpdate) AddModuleIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.AddModuleIDs(ids...)
	return nu
}

// AddModules adds the "modules" edges to the Module entity.
func (nu *NamespaceUpdate) AddModules(m ...*Module) *NamespaceUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.AddModuleIDs(ids...)
}

// AddInstallationIDs adds the "installations" edge to the Installation entity by IDs.
func (nu *NamespaceUpdate) AddInstallationIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.AddInstallationIDs(ids...)
	return nu
}

// AddInstallations adds the "installations" edges to the Installation entity.
func (nu *NamespaceUpdate) AddInstallations(i ...*Installation) *NamespaceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.AddInstallationIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nu *NamespaceUpdate) Mutation() *NamespaceMutation {
	return nu.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (nu *NamespaceUpdate) ClearGroups() *NamespaceUpdate {
	nu.mutation.ClearGroups()
	return nu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (nu *NamespaceUpdate) RemoveGroupIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.RemoveGroupIDs(ids...)
	return nu
}

// RemoveGroups removes "groups" edges to Group entities.
func (nu *NamespaceUpdate) RemoveGroups(g ...*Group) *NamespaceUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nu.RemoveGroupIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (nu *NamespaceUpdate) ClearUsers() *NamespaceUpdate {
	nu.mutation.ClearUsers()
	return nu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (nu *NamespaceUpdate) RemoveUserIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.RemoveUserIDs(ids...)
	return nu
}

// RemoveUsers removes "users" edges to User entities.
func (nu *NamespaceUpdate) RemoveUsers(u ...*User) *NamespaceUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nu.RemoveUserIDs(ids...)
}

// ClearModules clears all "modules" edges to the Module entity.
func (nu *NamespaceUpdate) ClearModules() *NamespaceUpdate {
	nu.mutation.ClearModules()
	return nu
}

// RemoveModuleIDs removes the "modules" edge to Module entities by IDs.
func (nu *NamespaceUpdate) RemoveModuleIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.RemoveModuleIDs(ids...)
	return nu
}

// RemoveModules removes "modules" edges to Module entities.
func (nu *NamespaceUpdate) RemoveModules(m ...*Module) *NamespaceUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.RemoveModuleIDs(ids...)
}

// ClearInstallations clears all "installations" edges to the Installation entity.
func (nu *NamespaceUpdate) ClearInstallations() *NamespaceUpdate {
	nu.mutation.ClearInstallations()
	return nu
}

// RemoveInstallationIDs removes the "installations" edge to Installation entities by IDs.
func (nu *NamespaceUpdate) RemoveInstallationIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.RemoveInstallationIDs(ids...)
	return nu
}

// RemoveInstallations removes "installations" edges to Installation entities.
func (nu *NamespaceUpdate) RemoveInstallations(i ...*Installation) *NamespaceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.RemoveInstallationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NamespaceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamespaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NamespaceUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NamespaceUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NamespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   namespace.Table,
			Columns: namespace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: namespace.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldName,
		})
	}
	if nu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.GroupsTable,
			Columns: namespace.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !nu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.GroupsTable,
			Columns: namespace.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.GroupsTable,
			Columns: namespace.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.UsersTable,
			Columns: namespace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !nu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.UsersTable,
			Columns: namespace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.UsersTable,
			Columns: namespace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ModulesTable,
			Columns: []string{namespace.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedModulesIDs(); len(nodes) > 0 && !nu.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ModulesTable,
			Columns: []string{namespace.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ModulesTable,
			Columns: []string{namespace.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstallationsTable,
			Columns: []string{namespace.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedInstallationsIDs(); len(nodes) > 0 && !nu.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstallationsTable,
			Columns: []string{namespace.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.InstallationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstallationsTable,
			Columns: []string{namespace.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NamespaceUpdateOne is the builder for updating a single Namespace entity.
type NamespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NamespaceMutation
}

// SetName sets the "name" field.
func (nuo *NamespaceUpdateOne) SetName(s string) *NamespaceUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (nuo *NamespaceUpdateOne) AddGroupIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.AddGroupIDs(ids...)
	return nuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (nuo *NamespaceUpdateOne) AddGroups(g ...*Group) *NamespaceUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nuo.AddGroupIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (nuo *NamespaceUpdateOne) AddUserIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.AddUserIDs(ids...)
	return nuo
}

// AddUsers adds the "users" edges to the User entity.
func (nuo *NamespaceUpdateOne) AddUsers(u ...*User) *NamespaceUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nuo.AddUserIDs(ids...)
}

// AddModuleIDs adds the "modules" edge to the Module entity by IDs.
func (nuo *NamespaceUpdateOne) AddModuleIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.AddModuleIDs(ids...)
	return nuo
}

// AddModules adds the "modules" edges to the Module entity.
func (nuo *NamespaceUpdateOne) AddModules(m ...*Module) *NamespaceUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.AddModuleIDs(ids...)
}

// AddInstallationIDs adds the "installations" edge to the Installation entity by IDs.
func (nuo *NamespaceUpdateOne) AddInstallationIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.AddInstallationIDs(ids...)
	return nuo
}

// AddInstallations adds the "installations" edges to the Installation entity.
func (nuo *NamespaceUpdateOne) AddInstallations(i ...*Installation) *NamespaceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.AddInstallationIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nuo *NamespaceUpdateOne) Mutation() *NamespaceMutation {
	return nuo.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (nuo *NamespaceUpdateOne) ClearGroups() *NamespaceUpdateOne {
	nuo.mutation.ClearGroups()
	return nuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveGroupIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.RemoveGroupIDs(ids...)
	return nuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (nuo *NamespaceUpdateOne) RemoveGroups(g ...*Group) *NamespaceUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nuo.RemoveGroupIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (nuo *NamespaceUpdateOne) ClearUsers() *NamespaceUpdateOne {
	nuo.mutation.ClearUsers()
	return nuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveUserIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.RemoveUserIDs(ids...)
	return nuo
}

// RemoveUsers removes "users" edges to User entities.
func (nuo *NamespaceUpdateOne) RemoveUsers(u ...*User) *NamespaceUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nuo.RemoveUserIDs(ids...)
}

// ClearModules clears all "modules" edges to the Module entity.
func (nuo *NamespaceUpdateOne) ClearModules() *NamespaceUpdateOne {
	nuo.mutation.ClearModules()
	return nuo
}

// RemoveModuleIDs removes the "modules" edge to Module entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveModuleIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.RemoveModuleIDs(ids...)
	return nuo
}

// RemoveModules removes "modules" edges to Module entities.
func (nuo *NamespaceUpdateOne) RemoveModules(m ...*Module) *NamespaceUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.RemoveModuleIDs(ids...)
}

// ClearInstallations clears all "installations" edges to the Installation entity.
func (nuo *NamespaceUpdateOne) ClearInstallations() *NamespaceUpdateOne {
	nuo.mutation.ClearInstallations()
	return nuo
}

// RemoveInstallationIDs removes the "installations" edge to Installation entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveInstallationIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.RemoveInstallationIDs(ids...)
	return nuo
}

// RemoveInstallations removes "installations" edges to Installation entities.
func (nuo *NamespaceUpdateOne) RemoveInstallations(i ...*Installation) *NamespaceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.RemoveInstallationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NamespaceUpdateOne) Select(field string, fields ...string) *NamespaceUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Namespace entity.
func (nuo *NamespaceUpdateOne) Save(ctx context.Context) (*Namespace, error) {
	var (
		err  error
		node *Namespace
	)
	if len(nuo.hooks) == 0 {
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamespaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) SaveX(ctx context.Context) *Namespace {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NamespaceUpdateOne) sqlSave(ctx context.Context) (_node *Namespace, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   namespace.Table,
			Columns: namespace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: namespace.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Namespace.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, namespace.FieldID)
		for _, f := range fields {
			if !namespace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != namespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldName,
		})
	}
	if nuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.GroupsTable,
			Columns: namespace.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !nuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.GroupsTable,
			Columns: namespace.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.GroupsTable,
			Columns: namespace.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.UsersTable,
			Columns: namespace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !nuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.UsersTable,
			Columns: namespace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.UsersTable,
			Columns: namespace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ModulesTable,
			Columns: []string{namespace.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedModulesIDs(); len(nodes) > 0 && !nuo.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ModulesTable,
			Columns: []string{namespace.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ModulesTable,
			Columns: []string{namespace.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstallationsTable,
			Columns: []string{namespace.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedInstallationsIDs(); len(nodes) > 0 && !nuo.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstallationsTable,
			Columns: []string{namespace.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.InstallationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstallationsTable,
			Columns: []string{namespace.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: installation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Namespace{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
