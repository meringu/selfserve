type Query {
  modules(
    after: Cursor
    first: ID
    before: Cursor
    last: ID
    orderBy: ModuleOrder
    where: ModuleWhereInput
  ): ModuleConnection

  module(id: ID!): Module!
}

type Mutation {
  # Module
  createModule(input: CreateModule!): Module!
  updateModule(input: UpdateModule!): Module!
  deleteModule(input: DeleteModule!): ID!

  # ModuleVersion
  createModuleVersion(input: CreateModuleVersion!): ModuleVersion!
  updateModuleVersion(input: UpdateModuleVersion!): ModuleVersion!
  deleteModuleVersion(input: DeleteModuleVersion!): ID!
}

scalar Time
scalar Cursor

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

enum OrderDirection {
  ASC
  DESC
}

##
## Module
##

type Module implements Node {
  id: ID!
  name: String!
  description: String!
  createdAt: Time
  versions(id: ID, version: String): [ModuleVersion]!
}

type ModuleConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ModuleEdge]
}

type ModuleEdge {
  node: Module
  cursor: Cursor!
}

enum ModuleOrderField {
  CREATED_AT
  NAME
}

input ModuleOrder {
  direction: OrderDirection!
  field: ModuleOrderField
}

input CreateModule {
  name: String!
  description: String!
}

input UpdateModule {
  id: ID!
  name: String
  description: String
}

input DeleteModule {
  id: ID!
}

##
## ModuleVersion
##

type ModuleVersion {
  id: ID!
  version: String!
  source: String!
}

input CreateModuleVersion {
  module: ID!
  version: String!
  source: String!
}

input UpdateModuleVersion {
  id: ID!
  version: String
  source: String
}

input DeleteModuleVersion {
  id: ID!
}
